generator client {
    provider = "prisma-client-js"
}

datasource db {
    url      = env("DATABASE_URL")
    provider = "postgresql"
}

model User {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    email     String   @unique
    name      String?
}

model Course {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())

    title       String   @unique
    description String
    modules     Module[]
    duration    String
    level       String?
    image       String?
}

model Module {
    id          Int       @id @default(autoincrement())
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @default(now())
    title       String
    description String
    progress    Int       @default(0)
    course      Course    @relation(fields: [courseId], references: [id])
    courseId    Int
    lectures    Lecture[]
}

model Lecture {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())
    title     String
    duration  String?
    completed Boolean  @default(false)
    type      String? // Например: "video", "text", "interactive"
    content   String? // HTML-контент лекции
    module    Module   @relation(fields: [moduleId], references: [id])
    moduleId  Int

    // Добавляем связанные модели для дополнительного контента
    codeExamples     CodeExample[]
    quizQuestions    QuizQuestion[]
    codingChallenges CodingChallenge[]

    @@unique([title, moduleId])
}

model CodeExample {
    id        Int     @id @default(autoincrement())
    title     String
    code      String
    output    String?
    lecture   Lecture @relation(fields: [lectureId], references: [id])
    lectureId Int
}

model QuizQuestion {
    id            Int     @id @default(autoincrement())
    text          String
    options       Json // Массив вариантов ответа {id: String, text: String}
    correctAnswer String
    explanation   String?
    lecture       Lecture @relation(fields: [lectureId], references: [id])
    lectureId     Int
}

model CodingChallenge {
    id             Int     @id @default(autoincrement())
    title          String
    description    String
    initialCode    String
    solution       String?
    expectedOutput String?
    lecture        Lecture @relation(fields: [lectureId], references: [id])
    lectureId      Int
}
